generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  password        String
  name            String
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  attendances     Attendance[]
  enrolledCourses CourseStudent[]
  taughtCourses   CourseTeacher[]
  grades          Grade[]
  academic        StudentAcademic?
  roles           UserRole[]

  @@map("users")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Course {
  id          String          @id @default(cuid())
  name        String
  description String?
  code        String          @unique
  credits     Int             @default(1)
  active      Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  attendances Attendance[]
  students    CourseStudent[]
  teachers    CourseTeacher[]
  grades      Grade[]

  @@map("courses")
}

model CourseTeacher {
  id        String   @id @default(cuid())
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("course_teachers")
}

model CourseStudent {
  id        String   @id @default(cuid())
  courseId  String
  userId    String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@map("course_students")
}

model StudentAcademic {
  id              String    @id @default(cuid())
  studentId       String    @unique
  enrollmentDate  DateTime
  graduationDate  DateTime?
  currentSemester Int       @default(1)
  status          String    @default("active")
  cumulativeGPA   Float     @default(0.0)
  totalCredits    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  student         User      @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("student_academics")
}

model Grade {
  id          String   @id @default(cuid())
  studentId   String
  courseId    String
  value       Float
  letterGrade String?
  semester    String
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, semester])
  @@map("grades")
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  courseId  String
  date      DateTime
  status    String   @default("present")
  comments  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, date])
  @@map("attendances")
}
